<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.5.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 52 52" style="enable-background:new 0 0 52 52;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#231F20;}
	.st1{fill:#FFFFFF;}
</style>
<path class="st0" d="M48.1,5.5v18.2c0,0.7-0.6,1.3-1.3,1.3H28.5c-0.8,0-1.4-0.6-1.4-1.4v-3.1c0-0.8,0.7-1.5,1.5-1.5h7
	c0.9,0,1.6-0.4,1.3-1.2c-0.3-0.5-0.7-1-1.2-1.4c-2.8-2.8-6.6-4.4-10.6-4.4c-5.2,0-10.1,2.7-12.9,7.6c-0.7,1.2-1.3,2.5-1.6,3.8
	C9,30,11.7,36.6,17.4,40.1c1.2,0.7,2.5,1.3,3.8,1.6c4.9,1.2,9.8,0,13.4-3c0.6-0.5,1.5-0.4,2,0.1l2.1,2.1c0.6,0.6,0.6,1.6-0.1,2.2
	c-3.8,3.2-8.6,5-13.7,5c-5.8,0-11.2-2.3-15.2-6.5c-3.8-3.9-5.9-9.3-5.8-14.7c0.1-7,3.6-13.5,9.7-17.5c2.1-1.4,4.5-2.4,7-2.9
	c7.2-1.4,14.2,0.7,19.2,5.7c0.4,0.3,0.7,0.6,1,1c0.7,0.6,1.2,0.2,1.2-0.7v-7C42,4.7,42.7,4,43.5,4h3C47.3,4,48,4.7,48.1,5.5z"/>
<rect x="24.2" y="25.1" class="st1" width="27.8" height="26.9"/>
<script  xmlns="">{
            document.currentScript.dataset.injected = true;
            const o = JSON.parse(decodeURIComponent(escape(atob(&apos;eyJ1c2VyQWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMTguMCIsImFwcFZlcnNpb24iOiI1LjAgKFdpbmRvd3MpIiwicGxhdGZvcm0iOiJXaW5kb3dzIiwidmVuZG9yIjoiIiwicHJvZHVjdCI6IkdlY2tvIiwidXNlckFnZW50RGF0YSI6IltkZWxldGVdIiwib3NjcHUiOiJXaW5kb3dzIDEwIiwicHJvZHVjdFN1YiI6IjIwMTAwMTAxIiwiYnVpbGRJRCI6IjIwMTgxMDAxMDAwMDAwIn0=&apos;))));

            if (o.userAgentDataBuilder) {
              const v = new class NavigatorUAData {
                #p;

                constructor({p, ua}) {
                  this.#p = p;

                  const version = p.browser.major;
                  const name = p.browser.name === &apos;Chrome&apos; ? &apos;Google Chrome&apos; : p.browser.name;

                  this.brands = [{
                    brand: name,
                    version
                  }, {
                    brand: &apos;Chromium&apos;,
                    version
                  }, {
                    brand: &apos;Not=A?Brand&apos;,
                    version: &apos;24&apos;
                  }];

                  this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);

                  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform
                  this.platform = &apos;Unknown&apos;;
                  if (p.os &amp;&amp; p.os.name) {
                    const name = p.os.name.toLowerCase();
                    if (name.includes(&apos;mac&apos;)) {
                      this.platform = &apos;macOS&apos;;
                    }
                    else if (name.includes(&apos;debian&apos;)) {
                      this.platform = &apos;Linux&apos;;
                    }
                    else {
                      this.platform = p.os.name;
                    }
                  }
                }
                toJSON() {
                  return {
                    brands: this.brands,
                    mobile: this.mobile,
                    platform: this.platform
                  };
                }
                getHighEntropyValues(hints) {
                  if (!hints || Array.isArray(hints) === false) {
                    return Promise.reject(Error(&quot;Failed to execute &apos;getHighEntropyValues&apos; on &apos;NavigatorUAData&apos;&quot;));
                  }

                  const r = this.toJSON();

                  if (hints.includes(&apos;architecture&apos;)) {
                    r.architecture = this.#p?.cpu?.architecture || &apos;x86&apos;;
                  }
                  if (hints.includes(&apos;bitness&apos;)) {
                    r.bitness = &apos;64&apos;;
                  }
                  if (hints.includes(&apos;model&apos;)) {
                    r.model = &apos;&apos;;
                  }
                  if (hints.includes(&apos;platformVersion&apos;)) {
                    r.platformVersion = this.#p?.os?.version || &apos;10.0.0&apos;;
                  }
                  if (hints.includes(&apos;uaFullVersion&apos;)) {
                    r.uaFullVersion = this.brands[0].version;
                  }
                  if (hints.includes(&apos;fullVersionList&apos;)) {
                    r.fullVersionList = this.brands;
                  }
                  return Promise.resolve(r);
                }
              }(o.userAgentDataBuilder);

              navigator.__defineGetter__(&apos;userAgentData&apos;, () =&gt; {
                return v;
              });
            }
            delete o.userAgentDataBuilder;

            for (const key of Object.keys(o)) {
              if (o[key] === &apos;[delete]&apos;) {
                delete Object.getPrototypeOf(window.navigator)[key];
              }
              else {
                navigator.__defineGetter__(key, () =&gt; {
                  if (o[key] === &apos;empty&apos;) {
                    return &apos;&apos;;
                  }
                  return o[key];
                });
              }
            }
          }
	</script>
<script  xmlns="">{
            document.currentScript.dataset.injected = true;
            const o = JSON.parse(decodeURIComponent(escape(atob(&apos;eyJ1c2VyQWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0OyBydjoxMDkuMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC8xMTguMCIsImFwcFZlcnNpb24iOiI1LjAgKFdpbmRvd3MpIiwicGxhdGZvcm0iOiJXaW5kb3dzIiwidmVuZG9yIjoiIiwicHJvZHVjdCI6IkdlY2tvIiwidXNlckFnZW50RGF0YSI6IltkZWxldGVdIiwib3NjcHUiOiJXaW5kb3dzIDEwIiwicHJvZHVjdFN1YiI6IjIwMTAwMTAxIiwiYnVpbGRJRCI6IjIwMTgxMDAxMDAwMDAwIn0=&apos;))));

            if (o.userAgentDataBuilder) {
              const v = new class NavigatorUAData {
                #p;

                constructor({p, ua}) {
                  this.#p = p;

                  const version = p.browser.major;
                  const name = p.browser.name === &apos;Chrome&apos; ? &apos;Google Chrome&apos; : p.browser.name;

                  this.brands = [{
                    brand: name,
                    version
                  }, {
                    brand: &apos;Chromium&apos;,
                    version
                  }, {
                    brand: &apos;Not=A?Brand&apos;,
                    version: &apos;24&apos;
                  }];

                  this.mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);

                  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform
                  this.platform = &apos;Unknown&apos;;
                  if (p.os &amp;&amp; p.os.name) {
                    const name = p.os.name.toLowerCase();
                    if (name.includes(&apos;mac&apos;)) {
                      this.platform = &apos;macOS&apos;;
                    }
                    else if (name.includes(&apos;debian&apos;)) {
                      this.platform = &apos;Linux&apos;;
                    }
                    else {
                      this.platform = p.os.name;
                    }
                  }
                }
                toJSON() {
                  return {
                    brands: this.brands,
                    mobile: this.mobile,
                    platform: this.platform
                  };
                }
                getHighEntropyValues(hints) {
                  if (!hints || Array.isArray(hints) === false) {
                    return Promise.reject(Error(&quot;Failed to execute &apos;getHighEntropyValues&apos; on &apos;NavigatorUAData&apos;&quot;));
                  }

                  const r = this.toJSON();

                  if (hints.includes(&apos;architecture&apos;)) {
                    r.architecture = this.#p?.cpu?.architecture || &apos;x86&apos;;
                  }
                  if (hints.includes(&apos;bitness&apos;)) {
                    r.bitness = &apos;64&apos;;
                  }
                  if (hints.includes(&apos;model&apos;)) {
                    r.model = &apos;&apos;;
                  }
                  if (hints.includes(&apos;platformVersion&apos;)) {
                    r.platformVersion = this.#p?.os?.version || &apos;10.0.0&apos;;
                  }
                  if (hints.includes(&apos;uaFullVersion&apos;)) {
                    r.uaFullVersion = this.brands[0].version;
                  }
                  if (hints.includes(&apos;fullVersionList&apos;)) {
                    r.fullVersionList = this.brands;
                  }
                  return Promise.resolve(r);
                }
              }(o.userAgentDataBuilder);

              navigator.__defineGetter__(&apos;userAgentData&apos;, () =&gt; {
                return v;
              });
            }
            delete o.userAgentDataBuilder;

            for (const key of Object.keys(o)) {
              if (o[key] === &apos;[delete]&apos;) {
                delete Object.getPrototypeOf(window.navigator)[key];
              }
              else {
                navigator.__defineGetter__(key, () =&gt; {
                  if (o[key] === &apos;empty&apos;) {
                    return &apos;&apos;;
                  }
                  return o[key];
                });
              }
            }
          }
	</script>
</svg>
